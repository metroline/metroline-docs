"use strict";(self.webpackChunkmetroline_docs_2=self.webpackChunkmetroline_docs_2||[]).push([[6583],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>v});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),u=c(t),d=o,v=u["".concat(p,".").concat(d)]||u[d]||s[d]||i;return t?r.createElement(v,l(l({ref:n},m),{},{components:t})):r.createElement(v,l({ref:n},m))}));function v(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=d;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a[u]="string"==typeof e?e:o,l[1]=a;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},648:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const i={title:"Environment",excerpt:""},l="Environment",a={unversionedId:"ci-configuration/environment",id:"ci-configuration/environment",title:"Environment",description:"Job environment",source:"@site/docs/20-ci-configuration/30-environment.md",sourceDirName:"20-ci-configuration",slug:"/ci-configuration/environment",permalink:"/docs/ci-configuration/environment",draft:!1,editUrl:"https://github.com/metroline/metroline-docs/tree/main/docs/20-ci-configuration/30-environment.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{title:"Environment",excerpt:""},sidebar:"main",previous:{title:"Conditional jobs",permalink:"/docs/ci-configuration/conditional-jobs"},next:{title:"Secrets",permalink:"/docs/ci-configuration/secrets"}},p={},c=[{value:"Job environment",id:"job-environment",level:2},{value:"Global environment",id:"global-environment",level:2},{value:"Predefined pipeline environment variables",id:"predefined-pipeline-environment-variables",level:2},{value:"METROLINE_PIPELINE_ID",id:"metroline_pipeline_id",level:3},{value:"METROLINE_COMMIT_SHA",id:"metroline_commit_sha",level:3},{value:"METROLINE_COMMIT_BRANCH",id:"metroline_commit_branch",level:3},{value:"METROLINE_COMMIT_URL",id:"metroline_commit_url",level:3},{value:"METROLINE_REPO_ID",id:"metroline_repo_id",level:3},{value:"METROLINE_REPO_URL_SSH",id:"metroline_repo_url_ssh",level:3},{value:"METROLINE_UPSTREAM_STATUS",id:"metroline_upstream_status",level:3}],m={toc:c};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"environment"},"Environment"),(0,o.kt)("h2",{id:"job-environment"},"Job environment"),(0,o.kt)("p",null,"If you want to provide environment variables to your jobs, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"env")," job property."),(0,o.kt)("div",{class:"blockquote","data-props":'{ "mod": "info" }'},(0,o.kt)("p",null,"Environment variables must match ",(0,o.kt)("inlineCode",{parentName:"p"},"/[a-zA-Z_][a-zA-Z0-9_]*/"),".")),(0,o.kt)("div",{class:"code-group","data-props":'{ "lineNumbers": ["true"] }'},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '1'\nimage: node:12\njobs:\n  build:\n    env:\n      MY_VAR: world\n      MY_VAR_2: world\n    script:\n      - echo \"Hello $MY_VAR\"\n      - echo $MY_VAR_2 > world.txt\n"))),(0,o.kt)("h2",{id:"global-environment"},"Global environment"),(0,o.kt)("p",null,"You can also define environment variables globally with the ",(0,o.kt)("inlineCode",{parentName:"p"},"env")," property:"),(0,o.kt)("div",{class:"code-group","data-props":'{ "lineNumbers": ["true"] }'},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '1'\nimage: node:12\nenv:\n  MY_VAR: world\njobs:\n  build:\n    env:\n      MY_VAR_2: world\n    script:\n      - echo \"Hello $MY_VAR\"\n      - echo $MY_VAR_2 > world.txt\n"))),(0,o.kt)("p",null,"Variables defined in the global ",(0,o.kt)("inlineCode",{parentName:"p"},"env")," will be overridden by those defined in the ",(0,o.kt)("inlineCode",{parentName:"p"},"env")," job property. "),(0,o.kt)("h2",{id:"predefined-pipeline-environment-variables"},"Predefined pipeline environment variables"),(0,o.kt)("p",null,"Metroline provides a number of predefined environment variables."),(0,o.kt)("h3",{id:"metroline_pipeline_id"},"METROLINE","_","PIPELINE","_","ID"),(0,o.kt)("p",null,"Pipeline ID"),(0,o.kt)("h3",{id:"metroline_commit_sha"},"METROLINE","_","COMMIT","_","SHA"),(0,o.kt)("p",null,"Commit sha"),(0,o.kt)("h3",{id:"metroline_commit_branch"},"METROLINE","_","COMMIT","_","BRANCH"),(0,o.kt)("p",null,"Commit branch"),(0,o.kt)("h3",{id:"metroline_commit_url"},"METROLINE","_","COMMIT","_","URL"),(0,o.kt)("p",null,"Commit url"),(0,o.kt)("h3",{id:"metroline_repo_id"},"METROLINE","_","REPO","_","ID"),(0,o.kt)("p",null,"Id of the git repository in your git server"),(0,o.kt)("h3",{id:"metroline_repo_url_ssh"},"METROLINE","_","REPO_URL","_","SSH"),(0,o.kt)("p",null,"SSH url to clone the git repository"),(0,o.kt)("h3",{id:"metroline_upstream_status"},"METROLINE","_","UPSTREAM","_","STATUS"),(0,o.kt)("p",null,"Status of the jobs ",(0,o.kt)("strong",{parentName:"p"},"upstream")," of the current job. This includes ",(0,o.kt)("strong",{parentName:"p"},"only")," the current job's dependency tree up to the pipeline root."))}u.isMDXComponent=!0}}]);