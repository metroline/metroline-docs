"use strict";(self.webpackChunkmetroline_docs_2=self.webpackChunkmetroline_docs_2||[]).push([[6667],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>b});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,b=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return t?i.createElement(b,r(r({ref:n},c),{},{components:t})):i.createElement(b,r({ref:n},c))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:o,r[1]=l;for(var p=2;p<a;p++)r[p]=t[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},381:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=t(7462),o=(t(7294),t(3905));const a={title:"Basic CI configuration",excerpt:""},r="Basic CI configuration",l={unversionedId:"ci-configuration/basics",id:"ci-configuration/basics",title:"Basic CI configuration",description:"Metroline expects your CI configuration inside a .metroline.yml file placed at the root of your projects.",source:"@site/docs/20-ci-configuration/10-basics.md",sourceDirName:"20-ci-configuration",slug:"/ci-configuration/basics",permalink:"/docs/ci-configuration/basics",draft:!1,editUrl:"https://github.com/metroline/metroline-docs/tree/main/docs/20-ci-configuration/10-basics.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Basic CI configuration",excerpt:""},sidebar:"main",previous:{title:"Gotchas",permalink:"/docs/getting-started/gotchas"},next:{title:"Conditional jobs",permalink:"/docs/ci-configuration/conditional-jobs"}},s={},p=[{value:"Global image",id:"global-image",level:2},{value:"bin",id:"bin",level:2},{value:"dependencies",id:"dependencies",level:2},{value:"allowFailure",id:"allowfailure",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"basic-ci-configuration"},"Basic CI configuration"),(0,o.kt)("p",null,"Metroline expects your CI configuration inside a ",(0,o.kt)("inlineCode",{parentName:"p"},".metroline.yml")," file placed at the root of your projects."),(0,o.kt)("p",null,"A basic example looks like this: "),(0,o.kt)("div",{class:"code-group","data-props":'{ "lineNumbers": ["true"] }'},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '1'\njobs:\n  # our build job\n  build:\n    # docker image of this job\n    image: node:12\n    # a set of commands to execute in a node:12 container\n    script:\n      - npm ci\n      - npm run build\n  # a job named \"test\"\n  test:\n    image: node:12\n    script:\n      - npm test\n"))),(0,o.kt)("div",{class:"blockquote","data-props":'{ "mod": "warning" }'},(0,o.kt)("p",null,"Job name ",(0,o.kt)("inlineCode",{parentName:"p"},"clone")," is reserved.")),(0,o.kt)("h2",{id:"global-image"},"Global image"),(0,o.kt)("p",null,"Instead of defining an image for each job, you can define a global one:"),(0,o.kt)("div",{class:"code-group","data-props":'{ "lineNumbers": ["true"] }'},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '1'\nimage: node:12\njobs:\n  build:\n    script:\n      - npm run build\n  test:\n    script:\n      - npm run test\n"))),(0,o.kt)("div",{class:"blockquote","data-props":'{ "mod": "info" }'},(0,o.kt)("p",null,"You must specify a job image if you haven't defined a global image")),(0,o.kt)("h2",{id:"bin"},"bin"),(0,o.kt)("p",null,"By default, all jobs use the ",(0,o.kt)("inlineCode",{parentName:"p"},"/bin/sh")," executable, but you are free to change it with the ",(0,o.kt)("inlineCode",{parentName:"p"},"bin")," job property:"),(0,o.kt)("div",{class:"code-group","data-props":'{ "lineNumbers": ["true"] }'},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '1'\nimage: node:12\njobs:\n  build:\n    bin: /bin/bash # or simply \"bash\"\n    script:\n      - npm run build\n"))),(0,o.kt)("p",null,"This can be any valid executable available in the shell. In the above example, we could have set ",(0,o.kt)("inlineCode",{parentName:"p"},"bin")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"bash"),", because bash is available globally in the ",(0,o.kt)("inlineCode",{parentName:"p"},"node:12")," Docker image."),(0,o.kt)("h2",{id:"dependencies"},"dependencies"),(0,o.kt)("p",null,"By default, all jobs are executed ",(0,o.kt)("strong",{parentName:"p"},"in parallel"),". To model dependencies between your jobs, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"dependencies")," job property:"),(0,o.kt)("div",{class:"blockquote","data-props":'{ "mod": "info" }'},(0,o.kt)("p",null,"You cannot defined cyclic dependencies.")),(0,o.kt)("div",{class:"code-group","data-props":'{ "lineNumbers": ["true"] }'},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '1'\nimage: node:12\njobs:\n  build:\n    script:\n      - npm run build\n  test:\n    script:\n      - npm run test\n    dependencies:\n      - build\n"))),(0,o.kt)("p",null,"In the above example, job ",(0,o.kt)("inlineCode",{parentName:"p"},"test")," will be executed ",(0,o.kt)("strong",{parentName:"p"},"only")," when job ",(0,o.kt)("inlineCode",{parentName:"p"},"build")," has succeeded."),(0,o.kt)("p",null,"This might sound a bit verbose, but it allows you to create complex workflows:"),(0,o.kt)("div",{class:"code-group","data-props":'{ "lineNumbers": ["true"] }'},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '1'\nimage: node:12\njobs:\n  build:\n    script:\n      - npm run build\n  test-node-11:\n    image: node:11\n    script:\n      - npm run test\n    dependencies:\n      - build\n  test-node-12:\n    script:\n      - npm run test\n    dependencies:\n      - build\n  publish:\n    script:\n      - npm publish\n    dependencies:\n      - test-node-11\n      - test-node-12\n"))),(0,o.kt)("p",null,"Job ",(0,o.kt)("inlineCode",{parentName:"p"},"publish")," will only be executed when jobs ",(0,o.kt)("inlineCode",{parentName:"p"},"test-node-11")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"test-node-12")," have succeeded."),(0,o.kt)("div",{class:"blockquote","data-props":'{ "mod": "warning" }'},(0,o.kt)("p",null,"Metroline shares the same workspace between jobs, you are responsible for making sure parallel jobs do not conflict using the filesystem.")),(0,o.kt)("h2",{id:"allowfailure"},"allowFailure"),(0,o.kt)("p",null,"Sometimes, you don't want your entire pipeline to stop because a not-so-important job failed. You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"allowFailure")," job property for this purpose:"),(0,o.kt)("div",{class:"code-group","data-props":'{ "lineNumbers": ["true"] }'},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"}," version: '1'\n image: node:12\n jobs:\n   build:\n     script:\n       - npm run build\n   test-node-11:\n     image: node:11\n     allowFailure: true\n     script:\n       - npm run test\n     dependencies:\n       - build\n   test-node-12:\n     script:\n       - npm run test\n     dependencies:\n       - build\n   publish:\n     script:\n       - npm publish\n     dependencies:\n       - test-node-11\n       - test-node-12\n"))),(0,o.kt)("p",null,"If job ",(0,o.kt)("inlineCode",{parentName:"p"},"test-node-11")," fails, job ",(0,o.kt)("inlineCode",{parentName:"p"},"publish")," will still be executed."))}u.isMDXComponent=!0}}]);